// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhonebookManager.Data;

#nullable disable

namespace PhonebookManager.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240312125451_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppClaimAppRole", b =>
                {
                    b.Property<int>("ClaimsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("ClaimsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AppClaimAppRole");
                });

            modelBuilder.Entity("PhonebookManager.Models.AppClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("AppClaims");
                });

            modelBuilder.Entity("PhonebookManager.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("PhonebookManager.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("PhonebookManager.Models.ChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ImplementationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("NewNameId")
                        .HasColumnType("int");

                    b.Property<int?>("OldNameId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneLineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequesterIdId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItOperatorId");

                    b.HasIndex("NewNameId");

                    b.HasIndex("OldNameId");

                    b.HasIndex("PhoneLineId");

                    b.HasIndex("RequesterIdId");

                    b.ToTable("ChangeRequests");
                });

            modelBuilder.Entity("PhonebookManager.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponsibleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PhonebookManager.Models.PhoneLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("LineOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LineOwnerId");

                    b.ToTable("PhoneLines");
                });

            modelBuilder.Entity("PhonebookManager.Models.PhoneUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Badge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneLineId");

                    b.ToTable("PhoneUsers");
                });

            modelBuilder.Entity("AppClaimAppRole", b =>
                {
                    b.HasOne("PhonebookManager.Models.AppClaim", null)
                        .WithMany()
                        .HasForeignKey("ClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhonebookManager.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhonebookManager.Models.AppUser", b =>
                {
                    b.HasOne("PhonebookManager.Models.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PhonebookManager.Models.ChangeRequest", b =>
                {
                    b.HasOne("PhonebookManager.Models.AppUser", "ItOperator")
                        .WithMany()
                        .HasForeignKey("ItOperatorId");

                    b.HasOne("PhonebookManager.Models.PhoneUser", "NewName")
                        .WithMany()
                        .HasForeignKey("NewNameId");

                    b.HasOne("PhonebookManager.Models.PhoneUser", "OldName")
                        .WithMany()
                        .HasForeignKey("OldNameId");

                    b.HasOne("PhonebookManager.Models.PhoneLine", "PhoneLine")
                        .WithMany("Changes")
                        .HasForeignKey("PhoneLineId");

                    b.HasOne("PhonebookManager.Models.AppUser", "RequesterId")
                        .WithMany()
                        .HasForeignKey("RequesterIdId");

                    b.Navigation("ItOperator");

                    b.Navigation("NewName");

                    b.Navigation("OldName");

                    b.Navigation("PhoneLine");

                    b.Navigation("RequesterId");
                });

            modelBuilder.Entity("PhonebookManager.Models.Department", b =>
                {
                    b.HasOne("PhonebookManager.Models.AppUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("PhonebookManager.Models.AppUser", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId");

                    b.Navigation("Manager");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("PhonebookManager.Models.PhoneLine", b =>
                {
                    b.HasOne("PhonebookManager.Models.Department", "Department")
                        .WithMany("Lines")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PhonebookManager.Models.PhoneUser", "LineOwner")
                        .WithMany()
                        .HasForeignKey("LineOwnerId");

                    b.Navigation("Department");

                    b.Navigation("LineOwner");
                });

            modelBuilder.Entity("PhonebookManager.Models.PhoneUser", b =>
                {
                    b.HasOne("PhonebookManager.Models.PhoneLine", null)
                        .WithMany("LineUsers")
                        .HasForeignKey("PhoneLineId");
                });

            modelBuilder.Entity("PhonebookManager.Models.Department", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("PhonebookManager.Models.PhoneLine", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("LineUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
